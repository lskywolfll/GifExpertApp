{"version":3,"sources":["components/Category/AddCategory.js","helper/getGifs.js","components/Loading/index.js","components/Category/GridGifItem.js","components/Category/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","Limpiar","onSubmit","e","preventDefault","oldArray","category","existe","find","categoryValue","Swal","fire","title","icon","text","allowOutsideClick","allowEnterKey","allowEscapeKey","handleSetCategory","type","value","onChange","target","getGifs","a","url","encodeURI","fetch","resp","json","data","gifs","map","id","images","downsized_medium","Loading","className","GridGifItem","src","alt","GifGrid","err","loading","state","setState","useEffect","then","message","catch","useFetchGifs","img","GifExpertApp","props","categories","ReactDOM","render","document","getElementById"],"mappings":"wOAiEeA,MA5Df,YAAyC,IAAlBC,EAAiB,EAAjBA,cAAiB,EAEAC,mBAAS,IAFT,mBAE7BC,EAF6B,KAEjBC,EAFiB,KAM9BC,EAAU,kBAAMD,EAAc,KAoCpC,OACI,sBACIE,SARa,SAACC,GAClBA,EAAEC,iBAEFP,GAAc,SAAAQ,GAAQ,OAxBA,SAACA,EAAUC,GACjC,GAAKA,EAYE,CACH,IAAMC,EAASF,EAASG,MAAK,SAAAC,GAAa,OAAIA,IAAkBH,KAGhE,OADAL,IACOM,EAAM,YAAOF,GAAP,CAAoBC,GAApB,mBAAiCD,IAL9C,OAVAK,IAAKC,KAAK,CACNC,MAAO,QACPC,KAAM,QACNC,KAAM,0BACNC,mBAAmB,EACnBC,eAAe,EACfC,gBAAgB,IAGpBhB,IACO,YAAII,GAYWa,CAAkBb,EAAUN,OAItD,SAGI,uBACIoB,KAAK,OACLC,MAAOrB,EACPsB,SA7Cc,SAAC,GAAD,IAAaD,EAAb,EAAGE,OAAUF,MAAb,OAA2BpB,EAAcoB,S,gCCT1DG,EAAO,uCAAG,WAAOjB,GAAP,uBAAAkB,EAAA,sEAED,mCACA,GACRC,EAJS,uDAED,mCAFC,cAIwDC,UAAUpB,GAJlE,kBAGD,IAHC,SAMIqB,MAAMF,GANV,cAMTG,EANS,gBAOQA,EAAKC,OAPb,uBAOPC,EAPO,EAOPA,KAEFC,EAAOD,EAAKE,KAAI,YAClB,MAAO,CACHC,GAFwE,EAAvDA,GAGjBrB,MAHwE,EAAnDA,MAIrBa,IAJwE,EAA5CS,OAAUC,iBAAoBV,QATnD,kBAiBRM,GAjBQ,2HAAH,sD,MCWLK,MARf,WACI,OACI,qBAAKC,UAAU,mBCaRC,MAff,YAA0C,IAAnB1B,EAAkB,EAAlBA,MAAWa,GAAO,EAAXQ,GAAW,EAAPR,KAC9B,OACI,sBAAKY,UAAU,6CAAf,UACI,qBAAKE,IAAKd,EAAKe,IAAK5B,IACpB,4BAAIA,QC2CD6B,MA3Cf,YAAgC,IAAbnC,EAAY,EAAZA,SAAY,ECJH,SAACA,GAAc,IAAD,EACZR,mBAAS,CAC/BgC,KAAM,GACNY,IAAK,KACLC,SAAS,IAJyB,mBAC/BC,EAD+B,KACxBC,EADwB,KA8BtC,OAvBAC,qBAAU,WACNvB,EAAQjB,GACHyC,MAAK,SAAAnB,GAEEiB,EADAjB,EACS,CACLE,KAAMF,EACNe,SAAS,GAGJ,CACLD,IAAK,CAAEM,QAAS,sBAChBL,SAAS,OAIpBM,OAAM,SAAAP,GACHG,EAAS,CACLH,MACAC,SAAS,SAGtB,CAACrC,IAEGsC,EDxBgCM,CAAa5C,GAAtC4B,EAFa,EAEnBJ,KAAca,EAFK,EAELA,QAASD,EAFJ,EAEIA,IAW/B,OAAIA,EAEI,qCACI,uCACA,4BAAIA,EAAIM,aAKhBL,EACO,cAAC,EAAD,IAIP,qCAEI,6BAAKrC,IACL,qBAAK+B,UAAU,YAAf,SACI,6BA1BDH,EAAOF,KAAI,SAACmB,GAAD,OACd,cAAC,EAAD,eAEQA,GADCA,EAAIlB,eEiBVmB,MAzBf,SAAsBC,GAElB,IAFyB,EAIWvD,mBAFd,CAAC,cAFE,mBAIlBwD,EAJkB,KAINzD,EAJM,KAYzB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAXGyD,EAAWtB,KAAI,SAAA1B,GAAQ,OAC1B,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,YCR1BiD,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a3d4b088.chunk.js","sourcesContent":["\nimport React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport Swal from 'sweetalert2';\n\nfunction AddCategory({ setCategories }) {\n\n    const [inputValue, setInputValue] = useState(\"\");\n\n    const handleInputChange = ({ target: { value } }) => setInputValue(value);\n\n    const Limpiar = () => setInputValue(\"\");\n\n    /**\n     * Validador antes de agregar un nuevo elemento en el array de categorias\n     * \n     * @param {Array} oldArray - Son todos los valores anteriores que estaban en el array \n     * @param { String } category - Es el nuevo valor a agregar como categoria\n     * @return { Array }  Nuevo array con la categoria\n     */\n    const handleSetCategory = (oldArray, category) => {\n        if (!category) {\n            Swal.fire({\n                title: \"Error\",\n                icon: \"error\",\n                text: \"Debes ingresar un texto\",\n                allowOutsideClick: false,\n                allowEnterKey: false,\n                allowEscapeKey: false\n            })\n\n            Limpiar()\n            return [...oldArray];\n        } else {\n            const existe = oldArray.find(categoryValue => categoryValue === category);\n\n            Limpiar()\n            return existe ? [...oldArray] : [category, ...oldArray];\n        }\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        setCategories(oldArray => handleSetCategory(oldArray, inputValue));\n    }\n\n    return (\n        <form\n            onSubmit={handleSubmit}\n        >\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory\n\n","export const getGifs = async (category) => {\n    try {\n        const token = \"gnJOv9a8DsGQR9sT9DOyI3nGa4SY5H7z\";\n        const limit = 10;\n        const url = `https://api.giphy.com/v1/gifs/search?api_key=${token}&q=${encodeURI(category)}&limit=${limit}`;\n\n        const resp = await fetch(url);\n        const { data } = await resp.json();\n\n        const gifs = data.map(({ id, title, images: { downsized_medium: { url } } }) => {\n            return {\n                id,\n                title,\n                url\n            }\n        });\n\n        return gifs;\n    } catch (error) {\n        return error\n    }\n};\n","import React from 'react'\nimport './index.css'\n\nfunction Loading() {\n    return (\n        <div className=\"lds-hourglass\">\n\n        </div>\n    )\n}\n\nexport default Loading\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction GridGifItem({ title, id, url }) {\n    return (\n        <div className=\"card animate__animated animate__bounceInUp\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n\nGridGifItem.propTypes = {\n    title: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired\n}\n\nexport default GridGifItem\n\n","\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { useFetchGifs } from '../../hooks/useFetchGifs'\nimport Loading from '../Loading';\nimport GridGifItem from './GridGifItem';\nfunction GifGrid({ category }) {\n\n    const { data: images, loading, err } = useFetchGifs(category);\n\n    const drawListImages = () => {\n        return images.map((img) => (\n            <GridGifItem\n                key={img.id}\n                {...img}\n            />\n        ));\n    }\n\n    if (err) {\n        return (\n            <>\n                <h1>Error</h1>\n                <p>{err.message}</p>\n            </>\n        )\n    }\n\n    if (loading) {\n        return <Loading />\n    }\n\n    return (\n        <>\n\n            <h3>{category}</h3>\n            <div className=\"card-grid\">\n                <ol>\n                    {drawListImages()}\n                </ol>\n            </div>\n        </>\n    )\n}\n\nGifGrid.propTypes = {\n    category: PropTypes.string.isRequired\n}\n\nexport default GifGrid","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helper/getGifs\";\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        err: null,\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category)\n            .then(resp => {\n                if (resp) {\n                    setState({\n                        data: resp,\n                        loading: false\n                    });\n                } else {\n                    setState({\n                        err: { message: \"No se pudo obtener\" },\n                        loading: false\n                    })\n                }\n            })\n            .catch(err => {\n                setState({\n                    err,\n                    loading: false\n                })\n            })\n    }, [category]);\n\n    return state;\n}","\n\nimport React, { Fragment, useState } from 'react'\nimport AddCategory from './components/Category/AddCategory';\nimport GifGrid from './components/Category/GifGrid';\n\nfunction GifExpertApp(props) {\n\n    const initialValues = [\"One Punch\"];\n\n    const [categories, setCategories] = useState(initialValues);\n\n    const drawItemsList = () => {\n        return categories.map(category => (\n            <GifGrid key={category} category={category} />\n        ));\n    }\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n\n            <ol>\n                {drawItemsList()}\n            </ol>\n        </>\n    )\n}\n\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport 'animate.css'\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}